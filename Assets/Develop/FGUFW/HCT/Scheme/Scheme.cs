/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is automatically generated. Do not modify it.

// package scheme;

// import com.google.errorprone.annotations.CanIgnoreReturnValue;
// import com.google.errorprone.annotations.CheckReturnValue;
// import palettes.CorePalette;
using System;
using System.Collections.Generic;

namespace FGUFW.HCT
{

    /** Represents a Material color scheme, a mapping of color roles to colors. */
    // @CheckReturnValue
    public class Scheme
    {

        /// <summary>
        /// 原色是在您的应用程序的屏幕和组件中最常显示的颜色。
        /// </summary>
        public int primary;

        /// <summary>
        /// 用于显示在原色之上的文本和图标的颜色。
        /// </summary>
        public int onPrimary;

        /// <summary>
        /// 容器的首选色调。
        /// </summary>
        public int primaryContainer;

        /// <summary>
        /// 应该用于primaryContainer.
        /// </summary>
        public int onPrimaryContainer;

        /// <summary>
        /// 次要颜色提供了更多强调和区分您的产品的方法。
        /// </summary>
        public int secondary;

        /// <summary>
        /// 用于显示在辅助颜色之上的文本和图标的颜色。
        /// </summary>
        public int onSecondary;

        /// <summary>
        /// 容器中使用的色调。
        /// </summary>
        public int secondaryContainer;

        /// <summary>
        /// 应该用于secondaryContainer.
        /// </summary>
        public int onSecondaryContainer;

        /// <summary>
        /// 可用于平衡原色和二次色的第三色，或提高对输入字段等元素的关注度。
        /// </summary>
        public int tertiary;

        /// <summary>
        /// 用于在第三颜色顶部显示的文本和图标的颜色。
        /// </summary>
        public int onTertiary;

        /// <summary>
        /// 容器中使用的色调。
        /// </summary>
        public int tertiaryContainer;

        /// <summary>
        /// 应该用于tertiaryContainer.
        /// </summary>
        public int onTertiaryContainer;

        /// <summary>
        /// 错误颜色用于指示组件中的错误，例如文本字段中的无效文本。
        /// </summary>
        public int error;

        /// <summary>
        /// 用于显示在错误颜色顶部的文本和图标的颜色。
        /// </summary>
        public int onError;

        /// <summary>
        /// 错误容器的首选色调。
        /// </summary>
        public int errorContainer;

        /// <summary>
        /// 应该用于errorContainer.
        /// </summary>
        public int onErrorContainer;

        /// <summary>
        /// 出现在可滚动内容后面的背景颜色。
        /// </summary>
        public int background;

        /// <summary>
        /// 用于显示在背景颜色之上的文本和图标的颜色。
        /// </summary>
        public int onBackground;

        /// <summary>
        /// 影响组件表面的表面颜色，例如卡片、工作表和菜单。
        /// </summary>
        public int surface;

        /// <summary>
        /// 用于显示在表面颜色顶部的文本和图标的颜色。
        /// </summary>
        public int onSurface;

        /// <summary>
        /// 具有类似用途的颜色的另一种选择surface。
        /// </summary>
        public int surfaceVariant;

        /// <summary>
        /// 可用于surface.
        /// </summary>
        public int onSurfaceVariant;

        /// <summary>
        /// 用于边界的微妙颜色。
        /// </summary>
        public int outline;

        /// <summary>
        /// 当不需要强烈对比时，用于装饰元素边界的实用颜色。
        /// </summary>
        public int outlineVariant;

        /// <summary>
        /// 阴影
        /// </summary>
        public int shadow;

        /// <summary>
        /// 遮盖内容的稀松布的颜色。
        /// </summary>
        public int scrim;

        /// <summary>
        /// 与 形成鲜明对比的颜色surface。
        /// </summary>
        public int inverseSurface;

        /// <summary>
        /// 与 形成鲜明对比的颜色inverseSurface。
        /// </summary>
        public int inverseOnSurface;

        /// <summary>
        /// 在需要反向配色方案的地方用作“主要”颜色的颜色，例如 SnackBar 上的按钮。
        /// </summary>
        public int inversePrimary;

        public Dictionary<string,int> AllColor = new Dictionary<string, int>();

        public Scheme() { }

        public Scheme(
            int primary,
            int onPrimary,
            int primaryContainer,
            int onPrimaryContainer,
            int secondary,
            int onSecondary,
            int secondaryContainer,
            int onSecondaryContainer,
            int tertiary,
            int onTertiary,
            int tertiaryContainer,
            int onTertiaryContainer,
            int error,
            int onError,
            int errorContainer,
            int onErrorContainer,
            int background,
            int onBackground,
            int surface,
            int onSurface,
            int surfaceVariant,
            int onSurfaceVariant,
            int outline,
            int outlineVariant,
            int shadow,
            int scrim,
            int inverseSurface,
            int inverseOnSurface,
            int inversePrimary)
        {
            this.primary = primary;
            this.onPrimary = onPrimary;
            this.primaryContainer = primaryContainer;
            this.onPrimaryContainer = onPrimaryContainer;
            this.secondary = secondary;
            this.onSecondary = onSecondary;
            this.secondaryContainer = secondaryContainer;
            this.onSecondaryContainer = onSecondaryContainer;
            this.tertiary = tertiary;
            this.onTertiary = onTertiary;
            this.tertiaryContainer = tertiaryContainer;
            this.onTertiaryContainer = onTertiaryContainer;
            this.error = error;
            this.onError = onError;
            this.errorContainer = errorContainer;
            this.onErrorContainer = onErrorContainer;
            this.background = background;
            this.onBackground = onBackground;
            this.surface = surface;
            this.onSurface = onSurface;
            this.surfaceVariant = surfaceVariant;
            this.onSurfaceVariant = onSurfaceVariant;
            this.outline = outline;
            this.outlineVariant = outlineVariant;
            this.shadow = shadow;
            this.scrim = scrim;
            this.inverseSurface = inverseSurface;
            this.inverseOnSurface = inverseOnSurface;
            this.inversePrimary = inversePrimary;

        }

        public void SetAllColor()
        {
            AllColor.Add("primary",primary);
            AllColor.Add("onPrimary",onPrimary);
            AllColor.Add("primaryContainer",primaryContainer);
            AllColor.Add("onPrimaryContainer",onPrimaryContainer);
            AllColor.Add("secondary",secondary);
            AllColor.Add("onSecondary",onSecondary);
            AllColor.Add("secondaryContainer",secondaryContainer);
            AllColor.Add("onSecondaryContainer",onSecondaryContainer);
            AllColor.Add("tertiary",tertiary);
            AllColor.Add("onTertiary",onTertiary);
            AllColor.Add("tertiaryContainer",tertiaryContainer);
            AllColor.Add("onTertiaryContainer",onTertiaryContainer);
            AllColor.Add("error",error);
            AllColor.Add("onError",onError);
            AllColor.Add("errorContainer",errorContainer);
            AllColor.Add("onErrorContainer",onErrorContainer);
            AllColor.Add("background",background);
            AllColor.Add("onBackground",onBackground);
            AllColor.Add("surface",surface);
            AllColor.Add("onSurface",onSurface);
            AllColor.Add("surfaceVariant",surfaceVariant);
            AllColor.Add("onSurfaceVariant",onSurfaceVariant);
            AllColor.Add("outline",outline);
            AllColor.Add("outlineVariant",outlineVariant);
            AllColor.Add("shadow",shadow);
            AllColor.Add("scrim",scrim);
            AllColor.Add("inverseSurface",inverseSurface);
            AllColor.Add("inverseOnSurface",inverseOnSurface);
            AllColor.Add("inversePrimary",inversePrimary);
        }

        public static Scheme light(int argb)
        {
            return lightFromCorePalette(CorePalette.of(argb));
        }

        public static Scheme dark(int argb)
        {
            return darkFromCorePalette(CorePalette.of(argb));
        }

        public static Scheme lightContent(int argb)
        {
            return lightFromCorePalette(CorePalette.contentOf(argb));
        }

        public static Scheme darkContent(int argb)
        {
            return darkFromCorePalette(CorePalette.contentOf(argb));
        }

        public static Scheme lightFromCorePalette(CorePalette core)
        {
            return new Scheme()
                .withPrimary(core.a1.tone(40))
                .withOnPrimary(core.a1.tone(100))
                .withPrimaryContainer(core.a1.tone(90))
                .withOnPrimaryContainer(core.a1.tone(10))
                .withSecondary(core.a2.tone(40))
                .withOnSecondary(core.a2.tone(100))
                .withSecondaryContainer(core.a2.tone(90))
                .withOnSecondaryContainer(core.a2.tone(10))
                .withTertiary(core.a3.tone(40))
                .withOnTertiary(core.a3.tone(100))
                .withTertiaryContainer(core.a3.tone(90))
                .withOnTertiaryContainer(core.a3.tone(10))
                .withError(core.error.tone(40))
                .withOnError(core.error.tone(100))
                .withErrorContainer(core.error.tone(90))
                .withOnErrorContainer(core.error.tone(10))
                .withBackground(core.n1.tone(99))
                .withOnBackground(core.n1.tone(10))
                .withSurface(core.n1.tone(99))
                .withOnSurface(core.n1.tone(10))
                .withSurfaceVariant(core.n2.tone(90))
                .withOnSurfaceVariant(core.n2.tone(30))
                .withOutline(core.n2.tone(50))
                .withOutlineVariant(core.n2.tone(80))
                .withShadow(core.n1.tone(0))
                .withScrim(core.n1.tone(0))
                .withInverseSurface(core.n1.tone(20))
                .withInverseOnSurface(core.n1.tone(95))
                .withInversePrimary(core.a1.tone(80));
        }

        public static Scheme darkFromCorePalette(CorePalette core)
        {
            return new Scheme()
                .withPrimary(core.a1.tone(80))
                .withOnPrimary(core.a1.tone(20))
                .withPrimaryContainer(core.a1.tone(30))
                .withOnPrimaryContainer(core.a1.tone(90))
                .withSecondary(core.a2.tone(80))
                .withOnSecondary(core.a2.tone(20))
                .withSecondaryContainer(core.a2.tone(30))
                .withOnSecondaryContainer(core.a2.tone(90))
                .withTertiary(core.a3.tone(80))
                .withOnTertiary(core.a3.tone(20))
                .withTertiaryContainer(core.a3.tone(30))
                .withOnTertiaryContainer(core.a3.tone(90))
                .withError(core.error.tone(80))
                .withOnError(core.error.tone(20))
                .withErrorContainer(core.error.tone(30))
                .withOnErrorContainer(core.error.tone(80))
                .withBackground(core.n1.tone(10))
                .withOnBackground(core.n1.tone(90))
                .withSurface(core.n1.tone(10))
                .withOnSurface(core.n1.tone(90))
                .withSurfaceVariant(core.n2.tone(30))
                .withOnSurfaceVariant(core.n2.tone(80))
                .withOutline(core.n2.tone(60))
                .withOutlineVariant(core.n2.tone(30))
                .withShadow(core.n1.tone(0))
                .withScrim(core.n1.tone(0))
                .withInverseSurface(core.n1.tone(90))
                .withInverseOnSurface(core.n1.tone(20))
                .withInversePrimary(core.a1.tone(40));
        }

        //  @CanIgnoreReturnValue
        public Scheme withPrimary(int primary)
        {
            this.primary = primary;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnPrimary(int onPrimary)
        {
            this.onPrimary = onPrimary;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withPrimaryContainer(int primaryContainer)
        {
            this.primaryContainer = primaryContainer;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnPrimaryContainer(int onPrimaryContainer)
        {
            this.onPrimaryContainer = onPrimaryContainer;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withSecondary(int secondary)
        {
            this.secondary = secondary;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnSecondary(int onSecondary)
        {
            this.onSecondary = onSecondary;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withSecondaryContainer(int secondaryContainer)
        {
            this.secondaryContainer = secondaryContainer;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnSecondaryContainer(int onSecondaryContainer)
        {
            this.onSecondaryContainer = onSecondaryContainer;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withTertiary(int tertiary)
        {
            this.tertiary = tertiary;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnTertiary(int onTertiary)
        {
            this.onTertiary = onTertiary;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withTertiaryContainer(int tertiaryContainer)
        {
            this.tertiaryContainer = tertiaryContainer;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnTertiaryContainer(int onTertiaryContainer)
        {
            this.onTertiaryContainer = onTertiaryContainer;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withError(int error)
        {
            this.error = error;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnError(int onError)
        {
            this.onError = onError;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withErrorContainer(int errorContainer)
        {
            this.errorContainer = errorContainer;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnErrorContainer(int onErrorContainer)
        {
            this.onErrorContainer = onErrorContainer;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withBackground(int background)
        {
            this.background = background;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnBackground(int onBackground)
        {
            this.onBackground = onBackground;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withSurface(int surface)
        {
            this.surface = surface;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnSurface(int onSurface)
        {
            this.onSurface = onSurface;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withSurfaceVariant(int surfaceVariant)
        {
            this.surfaceVariant = surfaceVariant;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOnSurfaceVariant(int onSurfaceVariant)
        {
            this.onSurfaceVariant = onSurfaceVariant;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOutline(int outline)
        {
            this.outline = outline;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withOutlineVariant(int outlineVariant)
        {
            this.outlineVariant = outlineVariant;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withShadow(int shadow)
        {
            this.shadow = shadow;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withScrim(int scrim)
        {
            this.scrim = scrim;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withInverseSurface(int inverseSurface)
        {
            this.inverseSurface = inverseSurface;
            return this;
        }

        //  @CanIgnoreReturnValue
        public Scheme withInverseOnSurface(int inverseOnSurface)
        {
            this.inverseOnSurface = inverseOnSurface;
            return this;
        }


        //  @CanIgnoreReturnValue
        public Scheme withInversePrimary(int inversePrimary)
        {
            this.inversePrimary = inversePrimary;
            return this;
        }
        
    }

}